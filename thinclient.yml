- hosts: server
  become: yes
  tasks:
    - name: read config variables
      include_vars: vars.yml
      # /vagrant path is used because ansible_local playbook runs inside virtual host
    - name: generate variables for shell scripts
      local_action: template src=vars.sh.j2 dest=/vagrant/vars.sh
    - name: install apt sources.list
      template: src=common/apt/sources.list dest=/etc/apt/sources.list mode=0644
      register: apt_sources_list
    - name: update apt cache
      apt: update_cache=yes
      when: apt_sources_list|changed
    - name: install required packages
      apt: name={{ item }} state=latest
      with_items:
        - dnsmasq
        - nginx-light
        - pxelinux
        # this package has modules necessary for pxelinux to boot
        - syslinux-common
        - rsync
    - name: install some packages for convenient work
      apt: name={{ item }} state=latest
      with_items:
        - bash-completion
        - tmux
        - mc
        - vim-tiny
    - name: install dnsmasq configs
      template: src=server/dnsmasq/dnsmasq.conf dest=/etc/dnsmasq.conf mode=0644
      notify: restart dnsmasq
      # dnsmasq fails to start if tftp directory /vagrant/build is not ready yet
      # this makes it try infinitely
    - name: install dnsmasq systemd config override
      template: src=server/{{ item }} dest=/etc/{{ item }} mode=0640
      with_items:
        - systemd/system/dnsmasq.service.d/override.conf
      notify: systemctl daemon-reload
    - name: create symlinks for pxelinux loader
      file: path={{ item.path }} state=link src={{ item.src }}
      with_items:
        - { path: '/vagrant/build/pxelinux.0', src: '/usr/lib/PXELINUX/pxelinux.0' }
        - { path: '/vagrant/build/ldlinux.c32', src: '/usr/lib/syslinux/modules/bios/ldlinux.c32' }
    - name: install nginx default site config
      template: src=server/nginx/sites-available/default dest=/etc/nginx/sites-available/default mode=0644
      notify: restart nginx
    - name: enable nginx default site
      file: path=/etc/nginx/sites-enabled/default state=link src=/etc/nginx/sites-available/default
      notify: restart nginx
    - name: create pxelinux.cfg directory
      file: path=/vagrant/build/pxelinux.cfg state=directory mode=0755
    - name: copy pxelinux default configs
      copy: src=server/pxelinux.cfg/default dest=/vagrant/build/pxelinux.cfg/default mode=0644
  handlers:
    - name: restart dnsmasq
      service: name=dnsmasq state=restarted
    - name: restart nginx
      service: name=nginx state=restarted
    - name: systemctl daemon-reload
      shell: systemctl daemon-reload

- hosts: template
  become: yes
  tasks:
  - name: read config variables
    include_vars: vars.yml
  - name: install apt sources.list
    template: src=common/apt/sources.list dest=/etc/apt/sources.list mode=0644
    register: apt_sources_list
  - name: update apt cache
    apt: update_cache=yes
    when: apt_sources_list|changed
  - name: remove unnecessary packages
    apt: name={{ item }} state=absent purge=yes
    with_items:
      - "{{ unnecessary_packages }}"
  - name: install required packages
    apt: name={{ item }} state=latest
    with_items:
      - initramfs-tools
      - squashfs-tools
      - aufs-tools
      - cpio
      # console autologin
      - mingetty
  - name: install general linux kernel packages
    apt: pkg={{ item }} state=latest
    with_items:
      - linux-image-generic-hwe-16.04-edge
      - linux-firmware
  - name: remove virtual linux kernel packages and headers
    apt: pkg={{ item }} state=absent
    with_items:
      - linux-image-virtual
      - linux-headers-virtual
      - linux-headers-generic
  - name: remove old linux kernel and header packages
    shell: |
      apt-cache depends linux-image-virtual | tr -s ' ' | grep '^ Depends:' | cut -d' ' -f3 | while read pkg; do
        if dpkg -l | grep ^ii | grep -q $pkg; then
            apt-get -y --force-yes --purge remove $pkg
        fi
      done
      apt-cache depends linux-headers-generic | tr -s ' ' | grep '^ Depends:' | cut -d' ' -f3 | while read pkg; do
        if dpkg -l | grep ^ii | grep -q $pkg; then
            apt-get -y --force-yes --purge remove $pkg
        fi
      done
    args:
      executable: /bin/bash
    register: apt_result
    changed_when: apt_result.stdout != ''
  - name: append clouudinit generated interfaces config to main interfaces file
    shell: cat /etc/network/interfaces.d/50-cloud-init.cfg >> /etc/network/interfaces
    removes: /etc/network/interfaces.d/50-cloud-init.cfg
  - name: remove cloudinit generated interfaces config
    file: path=/etc/network/interfaces.d/50-cloud-init.cfg state=absent
  - name: script to generate interfaces file
    template: src=template/scripts/generate-interfaces.sh dest=/usr/local/bin/generate-interfaces.sh mode=0755
  - name: systemd service to generate interfaces file
    template: src=template/systemd/system/generate-interfaces.service dest=/etc/systemd/system/generate-interfaces.service mode=0644
    notify: systemctl enable generate-interfaces.service
  - name: install initramfs hook script and config
    copy: src=template/{{ item }} dest=/etc/{{ item }} mode=0755
    with_items:
      - initramfs-tools/hooks/zz_custom
      - initramfs-tools/scripts/ram
      - initramfs-tools/initramfs.conf
    notify: update initramfs
  - name: create helper directory for aufs
    file: path=/AUFS state=directory mode=0755
  - name: config autologin on first console
    template: src=template/{{ item }} dest=/etc/{{ item }}} mode=0644
    with_items:
      - systemd/system/getty@tty1.service.d/override.conf
    notify: systemctl daemon-reload
  - name: install GUI packages
    include_tasks: thinclient_gui.yml
    when: install_gui_and_rdp_client
  handlers:
    # update artifacts in build every time we need to regenerate initrd
    - name: update initramfs
      shell: update-initramfs -u && cd /vagrant && ./build.sh initrd
    - name: systemctl daemon-reload
      shell: systemctl daemon-reload
    - name: systemctl enable generate-interfaces.service
      shell: systemctl enable generate-interfaces.service
