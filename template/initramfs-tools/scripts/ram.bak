#!/bin/sh -x
retry_nr=0
#set -x

get_url()
{
	_proto="$1"
	_url="$2"
	_dst="$3"
	_filename=`basename "${dst}"`

	case "${_proto}" in
	tftp)
	    [ -z "${_url}" ] && url="${_filename}"
	    atftp --option "blksize 40960" -l "${_dst}" -r "${_url}" --no-source-port-checking -g "${ROOTSERVER}" 69
	    return $?
	;;
	http)
	    [ -z "${_url}" ] && url="http://${ROOTSERVER}/${_filename}"
	    wget -O "${_dst}" "${_url}"
	    return $?
	;;
	esac
}

#do_net_conf()
#{
#        log_begin_msg "Configuring networking"
#        configure_networking
#        . /tmp/net-*.conf
#        log_end_msg
#
#}

do_rammount()
{
        log_begin_msg "Downloading rootfs image ${rootproto} ${rooturl}"
        get_url "${rootproto}" "${rooturl}" "/tmp/rootfs.squashfs" || return $?
        log_end_msg

	echo -e "\n############\nSTRANGE MAGIC HERE\n############\n"

	echo "Mounting rootfs image to temp directory"
	mkdir -p /tmp/AUFS/rootfs
	mount -t squashfs -o loop '/tmp/rootfs.squashfs' /tmp/AUFS/rootfs || return $?

	echo "Mounting real root with aufs"
	mount -t aufs -o ro,br=/tmp/AUFS/rootfs=ro none "${rootmnt}"

	echo "Creating tmpfs for moved mountpoints"
	mount -t tmpfs none "${rootmnt}"/AUFS

	echo "Moving rootfs mountpoint to directory in real root"
	mkdir "${rootmnt}"/AUFS/rootfs
	mount --move /tmp/AUFS/rootfs "${rootmnt}"/AUFS/rootfs

	echo "Processing overlays"
	for i in $overlays; do
		
		echo "Preparing"
		dir=$( mktemp -d -p /tmp ovl_XXXXXX )
		file=$( mktemp -p /tmp )
		filename=${file#/tmp/}
		dir_move="${rootmnt}"/AUFS/$filename
		mkdir $dir_move

		echo "Downloading overlay $i"
		get_url 'tftp' "$i" $file || return $?

		echo "Extracting overlay $i to tmpfs"
		mount -t tmpfs none $dir
		gunzip -c $file | tar -x -C $dir -f- || return $?
		rm $file

		echo "Adding overlay $i to root filesystem"
		mount -o remount,prepend:$dir=ro "${rootmnt}"

		echo "Moving overlay $i mount point to directory in real root"
		mount --move $dir $dir_move
	done

	#echo "Creating tmpfs rw filesystem for dynamic ld.so.cache"
	#cp "${rootmnt}"/etc/ld.so/ld.so.cache /tmp
	#mount -t tmpfs none "${rootmnt}"/etc/ld.so
	#mv /tmp/ld.so.cache "${rootmnt}"/etc/ld.so
	
	echo "Creating tmpfs rw filesystem for /media"
	mount -t tmpfs none "${rootmnt}"/media

	echo "STRANGE MAGIC FINISHED"

        # Home needs some magic 'cause it can be mounted through NFS
        if [ "${homeproto}" = "nfs" ]; then
		echo 'MOUNTING HOME WITH NFS'
		echo "homeurl=${homeurl} ROOTPATH=${ROOTPATH} BOOTIF=${BOOTIF}"
		#echo "Press Enter to continue"
		#read enter
		set -x
		[ -z "${homeurl}" ] && [ "${ROOTPATH}" ] && homeurl=`dirname "${ROOTPATH}"`"/home/${BOOTIF}"
		[ -z "${homeurl}" ] && homeurl=`dirname "${filename}"`"/home/${BOOTIF}"
		[ -z `echo "${homeurl}" | grep ':'` ] && homeurl="${ROOTSERVER}:${homeurl}"
		log_begin_msg "Mounting NFS home ${homeurl}"
		nfsmount -o "nolock,rw,retrans=10" "${homeurl}" "${rootmnt}/root" || return $?
		#echo "Press Enter to continue"
		#read enter
		set +x
		log_end_msg
        else
            log_begin_msg "Downloading home image ${homeproto} ${homeurl}"
            get_url "${homeproto}" "${homeurl}" "/tmp/home.tar.gz" || return $?
            log_end_msg

            log_begin_msg "Mounting tmpfs to ${rootmnt}/root"
            mount -t tmpfs -o size=${homesize:-512M} none ${rootmnt}/root || return $?
            log_end_msg

            log_begin_msg "Extracting home"
            gunzip -c '/tmp/home.tar.gz' | tar -x -C ${rootmnt}/root -f- || return $?
            log_end_msg
        fi
        return 0
}

mountroot()
{
        export homeproto='tftp'
        export rootproto='tftp'
        export confproto='tftp'
        export rooturl=''
        export homeurl=''
        export confurl=''
        for x in $(cat /proc/cmdline); do
                case $x in
                rooturl=*)
                        export rooturl=${x#rooturl=}
                        ;;
                homeurl=*)
                        export homeurl=${x#homeurl=}
                        ;;
                homeproto=*)
                        export homeproto=${x#homeproto=}
                        ;;
                overlays=*)
                        overlays=${x#overlays=}
			export overlays=$( echo $overlays | tr ',' ' ' )
			;;
                rootproto=*)
                        export rootproto=${x#rootproto=}
			;;
                esac
        done

        log_begin_msg "Loading module aufs"
        modprobe aufs
        log_end_msg
        log_begin_msg "Loading module squashfs"
        modprobe squashfs
        log_end_msg
	# For DHCP
        modprobe af_packet

        wait_for_udev 10

        # Default delay is around 180s
        delay=${ROOTDELAY:-180}
	
        # loop until rammount succeeds
		#do_net_conf
		configure_networking
        do_rammount || panic "Something wrong"

        while [ ${retry_nr} -lt ${delay} ] && [ ! -e ${rootmnt}${init} ]; do
                log_begin_msg "Retrying rammount"
                /bin/sleep 5
				#do_net_conf
				configure_networking
                do_rammount
                retry_nr=$(( ${retry_nr} + 1 ))
                log_end_msg
        done
}
