#!/bin/sh -x
retry_nr=0
#set -x

get_url()
{
	_proto="$1"
	_url="$2"
	_dst="$3"
	_filename=`basename "${dst}"`

	case "${_proto}" in
	tftp)
		atftp --verbose --option "blksize 40960" -l "${_dst}" -r "${_url}" --no-source-port-checking -g "${ROOTSERVER}" 69
		return $?
	;;
	http)
		if echo ${_url} } | grep -q '^http' ; then
			true
		else
			_url="http://${ROOTSERVER}/${_url}"
		fi
		wget -O "${_dst}" "${_url}"
		return $?
	;;
	esac
}

do_rammount()
{
	log_begin_msg "Downloading rootfs image ${rootproto} ${rooturl}"
	get_url "${rootproto}" "${rooturl}" "/tmp/rootfs.squashfs" || return $?
	log_end_msg

	echo -e "\n############\nSTRANGE MAGIC HERE\n############\n"

	set -x

	echo "Mounting rootfs image to temp directory"
	mkdir -p /tmp/AUFS/rootfs
	mount -t squashfs -o loop '/tmp/rootfs.squashfs' /tmp/AUFS/rootfs || return $?

	echo "Mounting real root with aufs"
	mount -t aufs -o ro,br=/tmp/AUFS/rootfs=ro none "${rootmnt}"

	echo "Creating tmpfs for moved mountpoints"
	mount -t tmpfs none "${rootmnt}"/AUFS

	echo "Moving rootfs mountpoint to directory in real root"
	mkdir "${rootmnt}"/AUFS/rootfs
	mount --move /tmp/AUFS/rootfs "${rootmnt}"/AUFS/rootfs

	if [ -n "$overlays" ]; then
	echo "Processing overlays"
	for i in $overlays; do

		echo "Preparing"
		# XXXXXX is replaced with random digits and letters
		dir=$( mktemp -d -p /tmp ovl_XXXXXX )
		file=$( mktemp -p /tmp )
		filename=${file#/tmp/}
		dir_move="${rootmnt}"/AUFS/$filename
		mkdir $dir_move

		echo "Downloading overlay $i"
		get_url "$overlayproto" "$i" $file || return $?

		echo "Extracting overlay $i to tmpfs"
		mount -t tmpfs none $dir
		gunzip -c $file | tar -x -C $dir -f- || return $?
		rm $file

		echo "Adding overlay $i to root filesystem"
		mount -o remount,prepend:$dir=ro "${rootmnt}"

		echo "Moving overlay $i mount point to directory in real root"
		mount --move $dir $dir_move
	done
	fi

	#echo "Creating tmpfs rw filesystem for dynamic ld.so.cache"
	#cp "${rootmnt}"/etc/ld.so/ld.so.cache /tmp
	#mount -t tmpfs none "${rootmnt}"/etc/ld.so
	#mv /tmp/ld.so.cache "${rootmnt}"/etc/ld.so

	echo "Creating tmpfs rw filesystem for /tmp"
	mount -t tmpfs none "${rootmnt}"/tmp

	echo "Creating tmpfs rw filesystem for /run"
	mount -t tmpfs none "${rootmnt}"/run

	echo "Creating tmpfs rw filesystem for /media"
	mount -t tmpfs none "${rootmnt}"/media

	echo "Creating tmpfs rw filesystem for /var/log"
	mount -t tmpfs none "${rootmnt}"/var/log

	echo "STRANGE MAGIC FINISHED"

	# Home needs some magic 'cause it can be mounted through NFS
	if [ "${homeproto}" = "nfs" ]; then
		echo 'MOUNTING HOME WITH NFS'
		echo "homeurl=${homeurl} ROOTPATH=${ROOTPATH} BOOTIF=${BOOTIF}"
		#echo "Press Enter to continue"
		#read enter
		set -x
		[ -z "${homeurl}" ] && [ "${ROOTPATH}" ] && homeurl=`dirname "${ROOTPATH}"`"/home/${BOOTIF}"
		[ -z "${homeurl}" ] && homeurl=`dirname "${filename}"`"/home/${BOOTIF}"
		[ -z `echo "${homeurl}" | grep ':'` ] && homeurl="${ROOTSERVER}:${homeurl}"
		log_begin_msg "Mounting NFS home ${homeurl}"
		nfsmount -o "nolock,rw,retrans=10" "${homeurl}" "${rootmnt}/ubuntu" || return $?
		#echo "Press Enter to continue"
		#read enter
		set +x
		log_end_msg
	else
		log_begin_msg "Downloading home image ${homeproto} ${homeurl}"
		get_url "${homeproto}" "${homeurl}" "/tmp/home.tar.gz" || return $?
		log_end_msg

		log_begin_msg "Mounting tmpfs to ${rootmnt}/home/ubuntu"
		mount -t tmpfs -o size=${homesize:-512M} none ${rootmnt}/home/ubuntu || return $?
		log_end_msg

		log_begin_msg "Extracting home"
		gunzip -c '/tmp/home.tar.gz' | tar -x -C ${rootmnt}/home/ubuntu -f- || return $?

		echo "Removing home.tar.gz"
		rm -f '/tmp/home.tar.gz'
		log_end_msg
	fi

	echo "do_rammount: OK"
	sleep 1
	return 0
}

mountroot()
{
		export homeproto='tftp'
		export rootproto='tftp'
		export rooturl=''
		export homeurl=''
		for x in $(cat /proc/cmdline); do
				case $x in
				rooturl=*)
						export rooturl=${x#rooturl=}
						;;
				homeurl=*)
						export homeurl=${x#homeurl=}
						;;
				homeproto=*)
						export homeproto=${x#homeproto=}
						;;
				overlays=*)
						overlays=${x#overlays=}
						export overlays=$( echo $overlays | tr ';' ' ' )
						;;
				overlayproto=*)
						export overlayproto=${x#overlayproto=}
						;;
				rootproto=*)
						export rootproto=${x#rootproto=}
						;;
				initrddebug=*)
						export initrddebug=${x#initrddebug=}
						;;
				esac
		done

		log_begin_msg "Loading module aufs"
		modprobe aufs
		log_end_msg
		log_begin_msg "Loading module squashfs"
		modprobe squashfs
		log_end_msg
		# For DHCP
		modprobe af_packet

		wait_for_udev 10

		# Default delay is around 180s
		delay=${ROOTDELAY:-180}

		# loop until rammount succeeds
		#do_net_conf
		configure_networking

		# Start debug shell inside initrd if initrddebug is set
		if [ -n "$initrddebug" ]; then
			echo "DEBUG shell inside initrd"
			sh
		fi

		do_rammount || panic "initrd: rammount() failed"

#        while [ ${retry_nr} -lt ${delay} ] && [ ! -e ${rootmnt}${init} ]; do
#                log_begin_msg "Retrying rammount"
#                /bin/sleep 5
#				#do_net_conf
#				configure_networking
#                do_rammount
#                retry_nr=$(( ${retry_nr} + 1 ))
#                log_end_msg
#        done
}
